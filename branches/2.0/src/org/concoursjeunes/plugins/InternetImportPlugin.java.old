package org.concoursjeunes.plugins;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Hashtable;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ProgressMonitor;
import javax.swing.ProgressMonitorInputStream;

import org.concoursjeunes.ConcoursJeunes;
import org.concoursjeunes.Entite;
import org.concoursjeunes.dialog.LigueLoaderDialog;

import ajinteractive.standard.java2.AjResourcesReader;

/**
 * @author  Aurélien JEOFFRAY
 */
public class InternetImportPlugin extends Thread implements ImportPlugin {

    private boolean state = false;
    
    private JFrame parentframe;
    
    private AjResourcesReader pluginRessources = new AjResourcesReader("InternetImportPlugin");
    private AjResourcesReader pluginLocalisation = new AjResourcesReader("InternetImportPlugin_libelle");
    
    public InternetImportPlugin() {
    }
    
    public void setParentFrame(JFrame parentframe) {
    	this.parentframe = parentframe;
    }
    
    @Override
    public void run() {
    	if(parentframe == null)
    		return;
    	
        File destination = new File(ConcoursJeunes.userRessources.getBasePathForUser() 
                + File.separator 
                + pluginRessources.getResourceString("file.base.entite")); //$NON-NLS-1$
        String url = ConcoursJeunes.configuration.getImportURL() 
                + pluginRessources.getResourceString("http.get.entite"); //$NON-NLS-1$
        //chargement du fichier organisationnel
        if(internetLoader(url, destination)) {
            
            //ouverture de la fenetre de selection des ligues à charger
            LigueLoaderDialog lld = new LigueLoaderDialog(parentframe);
            //selection des ligues à chargé
            Hashtable<String, Entite> liguesSelectionne = lld.getLiguesSelectionne();
            
            //initialisation de la barre de progression
            ProgressMonitor progressMonitor = new ProgressMonitor(parentframe, pluginLocalisation.getResourceString("message.telechargement"), //$NON-NLS-1$
                    "", 0, liguesSelectionne.size()); //$NON-NLS-1$
            progressMonitor.setProgress(0);
            progressMonitor.setMillisToDecideToPopup(0);
            
            int iLigue = 1;

            //boucle sur chacune des ligues selectionné
            for(Entite entite : liguesSelectionne.values()) {
                //gestion du "groupe AUTRE"
                if(entite.getAgrement().equals("null")) { //$NON-NLS-1$
                    //donne le numero des categories du groupe AUTRE
                    Vector<Integer> autre = lld.getAutre();
                    
                    //recupere le archers de AUTRE
                    for(int numLigue : autre) {
                        destination = new File(ConcoursJeunes.userRessources.getBasePathForUser() + File.separator + pluginRessources.getResourceString("file.base.archers", numLigue)); //$NON-NLS-1$
                        url = ConcoursJeunes.configuration.getImportURL() + pluginRessources.getResourceString("http.get.archers", numLigue); //$NON-NLS-1$
                        
                        internetLoader(url, destination);
                        
                        progressMonitor.setNote(entite.getNom() + " (" + pluginRessources.getResourceString("file.base.archers", numLigue) + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                        progressMonitor.setProgress(iLigue++);
                    }
                } else {
                    //recuperation des archers appartenant à la ligue courrante
                    int numLigue = Integer.parseInt(entite.getAgrement().substring(0,2));

                    destination = new File(ConcoursJeunes.userRessources.getBasePathForUser() + File.separator + pluginRessources.getResourceString("file.base.archers", numLigue)); //$NON-NLS-1$
                    url = ConcoursJeunes.configuration.getImportURL() + pluginRessources.getResourceString("http.get.archers", numLigue); //$NON-NLS-1$
                    
                    internetLoader(url, destination);
                    
                    progressMonitor.setNote(entite.getNom() + " (" + pluginRessources.getResourceString("file.base.archers", numLigue) + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                    progressMonitor.setProgress(iLigue++);
                }
            }

            JOptionPane.showMessageDialog(parentframe, pluginLocalisation.getResourceString("message.import.fin"), //$NON-NLS-1$
                    pluginLocalisation.getResourceString("message.import"), JOptionPane.INFORMATION_MESSAGE); //$NON-NLS-1$
        }
    }
    
    /**
     * Indique si le chargement s'est terminé avec succés
     * 
     * @return boolean - l'etat de fin de chargement
     */
    public boolean isSuccess() {
        return state;
    }

    /**
     * Chargement d'une ressource à partir d'internet
     * 
     * @param url - l'url source de la ressource
     * @param destination - la destination
     * @return boolean - true si la requette à été executé avec succé, false sinon
     */
    private boolean internetLoader(String url, File destination) {
        FileOutputStream destinationFile = null;
        BufferedInputStream sourceStream = null;
        try {
            URL u = new URL(url);
            URLConnection uc = u.openConnection();
            InputStream in = uc.getInputStream();

            // Chain a ProgressMonitorInputStream to the 
            // URLConnection's InputStream
            ProgressMonitorInputStream pin = new ProgressMonitorInputStream(null, u.toString(), in);
            sourceStream = new BufferedInputStream(pin);
            
            destinationFile = new java.io.FileOutputStream(destination);
             
            // Set the maximum value of the ProgressMonitor
            ProgressMonitor pm = pin.getProgressMonitor(); 
            pm.setMaximum(uc.getContentLength());
            pm.setMillisToDecideToPopup(10);
            pm.setMillisToPopup(0);
            
            //Lecture par segment de 128Ko 
            byte[] buffer = new byte[128*1024];
            int nbLecture;
            while((nbLecture = sourceStream.read(buffer)) != -1 ) {
                    destinationFile.write(buffer, 0, nbLecture);
            }
            
            return true;
        } catch (InterruptedIOException e) {
              //supprime le fichier si celui ci n'est pas complet
              if(destination.exists()) {
                  destination.delete();
              }
              return false;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(parentframe,
                    "<html>" + pluginLocalisation.getResourceString("erreur.import") //$NON-NLS-1$ //$NON-NLS-2$
                    + "<br>" + e.getLocalizedMessage() //$NON-NLS-1$
                    + "</html>", //$NON-NLS-1$
                    pluginLocalisation.getResourceString("erreur"),JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$
            e.printStackTrace();
            return false;
        } finally {
            // Quoi qu'il arrive, on ferme les flux
            try { sourceStream.close(); } catch(Exception e) { }
            try { destinationFile.close(); } catch(Exception e) { }
      }
    }
}
